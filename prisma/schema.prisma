generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(uuid())
  email               String           @unique
  name                String
  hash                String
  profilePicture      String?
  isVerified          Boolean          @default(false)
  isActive            Boolean          @default(true)
  failedLoginAttempts Int              @default(0)
  lastLoginAt         DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  expenses            Expense[]
  categories          Category[]
  moneySources        MoneySource[]
  balanceHistories    BalanceHistory[]
  appSettings         AppSettings?

  @@index([email])
}

model Expense {
  id            String      @id @default(uuid())
  amount        Float
  date          DateTime
  notes         String?
  // Relationships
  category      Category    @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  categoryId    String
  moneySource   MoneySource @relation(fields: [moneySourceId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  moneySourceId String
  user          User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([date])
}

model Category {
  // Using custom strings for IDs (e.g., "food", "transportation")
  id        String    @id @default(uuid())
  name      String
  icon      String
  color     String?
  isDefault Boolean
  // Optional association to a user (for user-specific custom categories)
  user      User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String?
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model MoneySource {
  // Using custom strings for IDs (e.g., "cash", "bank")
  id               String           @id @default(uuid())
  name             String
  balance          Float
  currency         String
  icon             String
  isDefault        Boolean
  budget           Float
  expenses         Expense[]
  balanceHistories BalanceHistory[]
  user             User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId           String
  cardStyle        CardStyle?       @relation(fields: [cardStyleId], references: [id])
  cardStyleId      String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([userId])
  @@index([cardStyleId])
}

model BalanceHistory {
  id            String      @id @default(uuid())
  date          DateTime
  balance       Float
  currency      String
  moneySource   MoneySource @relation(fields: [moneySourceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  moneySourceId String
  user          User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String
  createdAt     DateTime    @default(now())

  @@index([moneySourceId])
  @@index([userId])
}

model AppSettings {
  id                String   @id @default(uuid())
  preferredCurrency String
  hideAmounts       Boolean
  themePreference   String
  geminiApiKey      String?
  // One-to-one relationship with User
  user              User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId            String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model ExchangeRate {
  id        String   @id // Currency code as primary key
  rate      Float
  timestamp DateTime
  base      String // Base currency from the API response
  updatedAt DateTime @updatedAt

  @@index([base])
}

model CardStyle {
  id              String        @id @default(uuid())
  name            String
  styleId         String        @unique // e.g., "modern-gradient"
  background      String // Tailwind class or custom style
  textColor       String
  cardNumberFont  String
  border          String
  shadow          String
  hasChip         Boolean       @default(true)
  chipColor       String
  visaLogoVariant String // "white", "black", etc.
  showBgImage     Boolean       @default(false)
  moneySources    MoneySource[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
